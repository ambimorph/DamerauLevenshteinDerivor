#!/usr/bin/env python

import cderivor, unittest

class DerivorTest(unittest.TestCase):

    def setUp(self):
        self.d = cderivor.Derivor("test/data/41vocabulary")

    def test_variations(self):

        test_words = ['a', 'as', 'tat', 'tere', 'there', 'stat', 'ads', 'at', 'all', 'sta', 'ah', 'its']
        expected_variations = [
            ['ha', 't', 'ad', 'as', 'at', 'ah'],
            ['a', 'ad', 'ads', 'ah', 'ask', 'at', 'ds', 'has'],
            ['stat', 'that', 'tart', 'tats', 'at', 'sat', 'tot', 'tan'],
            ['stere', 'there', 'teere', 'terse', 'teres', 'here', 'tore', 'teke', 'tern', 'etre', 'tree', 'teer'],
            ['tere', 'here', 'teere'],
            ['tat', 'sat', 'sta', 'stt'],
            ['ad', 'as', 'ds'],
            ['sat', 'a', 't', 'tat', 'ad', 'it', 'as', 'ah'],
            ['lal'],
            ['stat', 'stt', 'sat'],
            ['a', 'as', 'ha', 'at', 'ad'],
            ['tis', 'it']
            ]
                
        for i in range(len(test_words)):
            variations = self.d.variations(test_words[i])
            self.assertSetEqual(set(variations), set(expected_variations[i])), variations

        verbose_variations = self.d.variations(test_words[0], True)
        expected_output = set([
                'ad i a d,  generated by derive, line 176\n',
                'ha i @ h,  generated by derive, line 164\n',
                'ah i a h,  generated by derive, line 176\n',
                'at i a t,  generated by derive, line 176\n',
                'as i a s,  generated by derive, line 176\n',
                't s a t,  generated by derive, line 136\n'
                ])
        self.assertSetEqual(set(verbose_variations), expected_output), verbose_variations

    def test_inV(self):

        self.assertTrue(self.d.inV('<s>'))
        self.assertTrue(self.d.inV('tere'))
        self.assertTrue(self.d.inV('tree'))
        self.assertFalse(self.d.inV('trees'))

if __name__ == '__main__':
    unittest.main()

